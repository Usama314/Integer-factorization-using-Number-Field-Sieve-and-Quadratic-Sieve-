# SageMath implementation for finding the norm of an element in a number field and its square root modulo p 
# Define the polynomial f over QQ
f = x^3 + 16*x^2 + 23*x + 21

# Create a number field K generated by a root of f
K.<x> = NumberField(f)
print("Number field defined by f over QQ:")
print(K)

# Define the element y in the number field
y = 954522564040241878802*x^2 + 1473437779284753373541*x + 1465552076529211866174

# List of prime moduli
primes = [ 1229, 1279, 1289,  1303]  # you can add more primes here

# Compute the norm of y (down to Q)
N = y.norm()
print("Norm of y in Q:")
print(N)

# Take square root of the norm (in QQ)
a = N.sqrt()
print("Square root of norm:")
print(a)

# Loop over primes and reduce the square root modulo each prime
for p in primes:
    print(f"Square root of norm reduced modulo {p}: {mod(a, p)}")